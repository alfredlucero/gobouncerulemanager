// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ThroughputRuleChange is an object representing the database table.
type ThroughputRuleChange struct {
	ID                    int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Action                string    `boil:"action" json:"action" toml:"action" yaml:"action"`
	ThroughputRuleID      int       `boil:"throughput_rule_id" json:"throughput_rule_id" toml:"throughput_rule_id" yaml:"throughput_rule_id"`
	MXDomain              string    `boil:"mx_domain" json:"mx_domain" toml:"mx_domain" yaml:"mx_domain"`
	MaxConnections        int       `boil:"max_connections" json:"max_connections" toml:"max_connections" yaml:"max_connections"`
	MessagesPerConnection int       `boil:"messages_per_connection" json:"messages_per_connection" toml:"messages_per_connection" yaml:"messages_per_connection"`
	ConnectionTTLMillis   int       `boil:"connection_ttl_millis" json:"connection_ttl_millis" toml:"connection_ttl_millis" yaml:"connection_ttl_millis"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *throughputRuleChangeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L throughputRuleChangeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ThroughputRuleChangeColumns = struct {
	ID                    string
	Action                string
	ThroughputRuleID      string
	MXDomain              string
	MaxConnections        string
	MessagesPerConnection string
	ConnectionTTLMillis   string
	UpdatedAt             string
}{
	ID:                    "id",
	Action:                "action",
	ThroughputRuleID:      "throughput_rule_id",
	MXDomain:              "mx_domain",
	MaxConnections:        "max_connections",
	MessagesPerConnection: "messages_per_connection",
	ConnectionTTLMillis:   "connection_ttl_millis",
	UpdatedAt:             "updated_at",
}

var ThroughputRuleChangeTableColumns = struct {
	ID                    string
	Action                string
	ThroughputRuleID      string
	MXDomain              string
	MaxConnections        string
	MessagesPerConnection string
	ConnectionTTLMillis   string
	UpdatedAt             string
}{
	ID:                    "throughput_rule_change.id",
	Action:                "throughput_rule_change.action",
	ThroughputRuleID:      "throughput_rule_change.throughput_rule_id",
	MXDomain:              "throughput_rule_change.mx_domain",
	MaxConnections:        "throughput_rule_change.max_connections",
	MessagesPerConnection: "throughput_rule_change.messages_per_connection",
	ConnectionTTLMillis:   "throughput_rule_change.connection_ttl_millis",
	UpdatedAt:             "throughput_rule_change.updated_at",
}

// Generated where

var ThroughputRuleChangeWhere = struct {
	ID                    whereHelperint
	Action                whereHelperstring
	ThroughputRuleID      whereHelperint
	MXDomain              whereHelperstring
	MaxConnections        whereHelperint
	MessagesPerConnection whereHelperint
	ConnectionTTLMillis   whereHelperint
	UpdatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint{field: "`throughput_rule_change`.`id`"},
	Action:                whereHelperstring{field: "`throughput_rule_change`.`action`"},
	ThroughputRuleID:      whereHelperint{field: "`throughput_rule_change`.`throughput_rule_id`"},
	MXDomain:              whereHelperstring{field: "`throughput_rule_change`.`mx_domain`"},
	MaxConnections:        whereHelperint{field: "`throughput_rule_change`.`max_connections`"},
	MessagesPerConnection: whereHelperint{field: "`throughput_rule_change`.`messages_per_connection`"},
	ConnectionTTLMillis:   whereHelperint{field: "`throughput_rule_change`.`connection_ttl_millis`"},
	UpdatedAt:             whereHelpertime_Time{field: "`throughput_rule_change`.`updated_at`"},
}

// ThroughputRuleChangeRels is where relationship names are stored.
var ThroughputRuleChangeRels = struct {
	ThroughputRule string
}{
	ThroughputRule: "ThroughputRule",
}

// throughputRuleChangeR is where relationships are stored.
type throughputRuleChangeR struct {
	ThroughputRule *ThroughputRule `boil:"ThroughputRule" json:"ThroughputRule" toml:"ThroughputRule" yaml:"ThroughputRule"`
}

// NewStruct creates a new relationship struct
func (*throughputRuleChangeR) NewStruct() *throughputRuleChangeR {
	return &throughputRuleChangeR{}
}

// throughputRuleChangeL is where Load methods for each relationship are stored.
type throughputRuleChangeL struct{}

var (
	throughputRuleChangeAllColumns            = []string{"id", "action", "throughput_rule_id", "mx_domain", "max_connections", "messages_per_connection", "connection_ttl_millis", "updated_at"}
	throughputRuleChangeColumnsWithoutDefault = []string{"action", "throughput_rule_id", "mx_domain", "max_connections", "messages_per_connection", "connection_ttl_millis"}
	throughputRuleChangeColumnsWithDefault    = []string{"id", "updated_at"}
	throughputRuleChangePrimaryKeyColumns     = []string{"id"}
)

type (
	// ThroughputRuleChangeSlice is an alias for a slice of pointers to ThroughputRuleChange.
	// This should almost always be used instead of []ThroughputRuleChange.
	ThroughputRuleChangeSlice []*ThroughputRuleChange
	// ThroughputRuleChangeHook is the signature for custom ThroughputRuleChange hook methods
	ThroughputRuleChangeHook func(context.Context, boil.ContextExecutor, *ThroughputRuleChange) error

	throughputRuleChangeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	throughputRuleChangeType                 = reflect.TypeOf(&ThroughputRuleChange{})
	throughputRuleChangeMapping              = queries.MakeStructMapping(throughputRuleChangeType)
	throughputRuleChangePrimaryKeyMapping, _ = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, throughputRuleChangePrimaryKeyColumns)
	throughputRuleChangeInsertCacheMut       sync.RWMutex
	throughputRuleChangeInsertCache          = make(map[string]insertCache)
	throughputRuleChangeUpdateCacheMut       sync.RWMutex
	throughputRuleChangeUpdateCache          = make(map[string]updateCache)
	throughputRuleChangeUpsertCacheMut       sync.RWMutex
	throughputRuleChangeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var throughputRuleChangeBeforeInsertHooks []ThroughputRuleChangeHook
var throughputRuleChangeBeforeUpdateHooks []ThroughputRuleChangeHook
var throughputRuleChangeBeforeDeleteHooks []ThroughputRuleChangeHook
var throughputRuleChangeBeforeUpsertHooks []ThroughputRuleChangeHook

var throughputRuleChangeAfterInsertHooks []ThroughputRuleChangeHook
var throughputRuleChangeAfterSelectHooks []ThroughputRuleChangeHook
var throughputRuleChangeAfterUpdateHooks []ThroughputRuleChangeHook
var throughputRuleChangeAfterDeleteHooks []ThroughputRuleChangeHook
var throughputRuleChangeAfterUpsertHooks []ThroughputRuleChangeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ThroughputRuleChange) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ThroughputRuleChange) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ThroughputRuleChange) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ThroughputRuleChange) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ThroughputRuleChange) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ThroughputRuleChange) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ThroughputRuleChange) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ThroughputRuleChange) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ThroughputRuleChange) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleChangeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddThroughputRuleChangeHook registers your hook function for all future operations.
func AddThroughputRuleChangeHook(hookPoint boil.HookPoint, throughputRuleChangeHook ThroughputRuleChangeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		throughputRuleChangeBeforeInsertHooks = append(throughputRuleChangeBeforeInsertHooks, throughputRuleChangeHook)
	case boil.BeforeUpdateHook:
		throughputRuleChangeBeforeUpdateHooks = append(throughputRuleChangeBeforeUpdateHooks, throughputRuleChangeHook)
	case boil.BeforeDeleteHook:
		throughputRuleChangeBeforeDeleteHooks = append(throughputRuleChangeBeforeDeleteHooks, throughputRuleChangeHook)
	case boil.BeforeUpsertHook:
		throughputRuleChangeBeforeUpsertHooks = append(throughputRuleChangeBeforeUpsertHooks, throughputRuleChangeHook)
	case boil.AfterInsertHook:
		throughputRuleChangeAfterInsertHooks = append(throughputRuleChangeAfterInsertHooks, throughputRuleChangeHook)
	case boil.AfterSelectHook:
		throughputRuleChangeAfterSelectHooks = append(throughputRuleChangeAfterSelectHooks, throughputRuleChangeHook)
	case boil.AfterUpdateHook:
		throughputRuleChangeAfterUpdateHooks = append(throughputRuleChangeAfterUpdateHooks, throughputRuleChangeHook)
	case boil.AfterDeleteHook:
		throughputRuleChangeAfterDeleteHooks = append(throughputRuleChangeAfterDeleteHooks, throughputRuleChangeHook)
	case boil.AfterUpsertHook:
		throughputRuleChangeAfterUpsertHooks = append(throughputRuleChangeAfterUpsertHooks, throughputRuleChangeHook)
	}
}

// One returns a single throughputRuleChange record from the query.
func (q throughputRuleChangeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ThroughputRuleChange, error) {
	o := &ThroughputRuleChange{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for throughput_rule_change")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ThroughputRuleChange records from the query.
func (q throughputRuleChangeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ThroughputRuleChangeSlice, error) {
	var o []*ThroughputRuleChange

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ThroughputRuleChange slice")
	}

	if len(throughputRuleChangeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ThroughputRuleChange records in the query.
func (q throughputRuleChangeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count throughput_rule_change rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q throughputRuleChangeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if throughput_rule_change exists")
	}

	return count > 0, nil
}

// ThroughputRule pointed to by the foreign key.
func (o *ThroughputRuleChange) ThroughputRule(mods ...qm.QueryMod) throughputRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ThroughputRuleID),
	}

	queryMods = append(queryMods, mods...)

	query := ThroughputRules(queryMods...)
	queries.SetFrom(query.Query, "`throughput_rule`")

	return query
}

// LoadThroughputRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (throughputRuleChangeL) LoadThroughputRule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeThroughputRuleChange interface{}, mods queries.Applicator) error {
	var slice []*ThroughputRuleChange
	var object *ThroughputRuleChange

	if singular {
		object = maybeThroughputRuleChange.(*ThroughputRuleChange)
	} else {
		slice = *maybeThroughputRuleChange.(*[]*ThroughputRuleChange)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &throughputRuleChangeR{}
		}
		args = append(args, object.ThroughputRuleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &throughputRuleChangeR{}
			}

			for _, a := range args {
				if a == obj.ThroughputRuleID {
					continue Outer
				}
			}

			args = append(args, obj.ThroughputRuleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`throughput_rule`),
		qm.WhereIn(`throughput_rule.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ThroughputRule")
	}

	var resultSlice []*ThroughputRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ThroughputRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for throughput_rule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for throughput_rule")
	}

	if len(throughputRuleChangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ThroughputRule = foreign
		if foreign.R == nil {
			foreign.R = &throughputRuleR{}
		}
		foreign.R.ThroughputRuleChanges = append(foreign.R.ThroughputRuleChanges, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ThroughputRuleID == foreign.ID {
				local.R.ThroughputRule = foreign
				if foreign.R == nil {
					foreign.R = &throughputRuleR{}
				}
				foreign.R.ThroughputRuleChanges = append(foreign.R.ThroughputRuleChanges, local)
				break
			}
		}
	}

	return nil
}

// SetThroughputRule of the throughputRuleChange to the related item.
// Sets o.R.ThroughputRule to related.
// Adds o to related.R.ThroughputRuleChanges.
func (o *ThroughputRuleChange) SetThroughputRule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ThroughputRule) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `throughput_rule_change` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"throughput_rule_id"}),
		strmangle.WhereClause("`", "`", 0, throughputRuleChangePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ThroughputRuleID = related.ID
	if o.R == nil {
		o.R = &throughputRuleChangeR{
			ThroughputRule: related,
		}
	} else {
		o.R.ThroughputRule = related
	}

	if related.R == nil {
		related.R = &throughputRuleR{
			ThroughputRuleChanges: ThroughputRuleChangeSlice{o},
		}
	} else {
		related.R.ThroughputRuleChanges = append(related.R.ThroughputRuleChanges, o)
	}

	return nil
}

// ThroughputRuleChanges retrieves all the records using an executor.
func ThroughputRuleChanges(mods ...qm.QueryMod) throughputRuleChangeQuery {
	mods = append(mods, qm.From("`throughput_rule_change`"))
	return throughputRuleChangeQuery{NewQuery(mods...)}
}

// FindThroughputRuleChange retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindThroughputRuleChange(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ThroughputRuleChange, error) {
	throughputRuleChangeObj := &ThroughputRuleChange{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `throughput_rule_change` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, throughputRuleChangeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from throughput_rule_change")
	}

	if err = throughputRuleChangeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return throughputRuleChangeObj, err
	}

	return throughputRuleChangeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ThroughputRuleChange) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no throughput_rule_change provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(throughputRuleChangeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	throughputRuleChangeInsertCacheMut.RLock()
	cache, cached := throughputRuleChangeInsertCache[key]
	throughputRuleChangeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			throughputRuleChangeAllColumns,
			throughputRuleChangeColumnsWithDefault,
			throughputRuleChangeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `throughput_rule_change` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `throughput_rule_change` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `throughput_rule_change` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, throughputRuleChangePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into throughput_rule_change")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == throughputRuleChangeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for throughput_rule_change")
	}

CacheNoHooks:
	if !cached {
		throughputRuleChangeInsertCacheMut.Lock()
		throughputRuleChangeInsertCache[key] = cache
		throughputRuleChangeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ThroughputRuleChange.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ThroughputRuleChange) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	throughputRuleChangeUpdateCacheMut.RLock()
	cache, cached := throughputRuleChangeUpdateCache[key]
	throughputRuleChangeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			throughputRuleChangeAllColumns,
			throughputRuleChangePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update throughput_rule_change, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `throughput_rule_change` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, throughputRuleChangePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, append(wl, throughputRuleChangePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update throughput_rule_change row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for throughput_rule_change")
	}

	if !cached {
		throughputRuleChangeUpdateCacheMut.Lock()
		throughputRuleChangeUpdateCache[key] = cache
		throughputRuleChangeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q throughputRuleChangeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for throughput_rule_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for throughput_rule_change")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ThroughputRuleChangeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), throughputRuleChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `throughput_rule_change` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, throughputRuleChangePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in throughputRuleChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all throughputRuleChange")
	}
	return rowsAff, nil
}

var mySQLThroughputRuleChangeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ThroughputRuleChange) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no throughput_rule_change provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(throughputRuleChangeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLThroughputRuleChangeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	throughputRuleChangeUpsertCacheMut.RLock()
	cache, cached := throughputRuleChangeUpsertCache[key]
	throughputRuleChangeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			throughputRuleChangeAllColumns,
			throughputRuleChangeColumnsWithDefault,
			throughputRuleChangeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			throughputRuleChangeAllColumns,
			throughputRuleChangePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert throughput_rule_change, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`throughput_rule_change`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `throughput_rule_change` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for throughput_rule_change")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == throughputRuleChangeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(throughputRuleChangeType, throughputRuleChangeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for throughput_rule_change")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for throughput_rule_change")
	}

CacheNoHooks:
	if !cached {
		throughputRuleChangeUpsertCacheMut.Lock()
		throughputRuleChangeUpsertCache[key] = cache
		throughputRuleChangeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ThroughputRuleChange record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ThroughputRuleChange) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ThroughputRuleChange provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), throughputRuleChangePrimaryKeyMapping)
	sql := "DELETE FROM `throughput_rule_change` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from throughput_rule_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for throughput_rule_change")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q throughputRuleChangeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no throughputRuleChangeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from throughput_rule_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for throughput_rule_change")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ThroughputRuleChangeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(throughputRuleChangeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), throughputRuleChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `throughput_rule_change` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, throughputRuleChangePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from throughputRuleChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for throughput_rule_change")
	}

	if len(throughputRuleChangeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ThroughputRuleChange) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindThroughputRuleChange(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThroughputRuleChangeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ThroughputRuleChangeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), throughputRuleChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `throughput_rule_change`.* FROM `throughput_rule_change` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, throughputRuleChangePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ThroughputRuleChangeSlice")
	}

	*o = slice

	return nil
}

// ThroughputRuleChangeExists checks if the ThroughputRuleChange row exists.
func ThroughputRuleChangeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `throughput_rule_change` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if throughput_rule_change exists")
	}

	return exists, nil
}
