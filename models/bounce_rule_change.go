// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BounceRuleChange is an object representing the database table.
type BounceRuleChange struct {
	ID           int16     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Action       string    `boil:"action" json:"action" toml:"action" yaml:"action"`
	BounceRuleID int16     `boil:"bounce_rule_id" json:"bounce_rule_id" toml:"bounce_rule_id" yaml:"bounce_rule_id"`
	ResponseCode int16     `boil:"response_code" json:"response_code" toml:"response_code" yaml:"response_code"`
	EnhancedCode string    `boil:"enhanced_code" json:"enhanced_code" toml:"enhanced_code" yaml:"enhanced_code"`
	Regex        string    `boil:"regex" json:"regex" toml:"regex" yaml:"regex"`
	Priority     int8      `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`
	Description  string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	BounceAction string    `boil:"bounce_action" json:"bounce_action" toml:"bounce_action" yaml:"bounce_action"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *bounceRuleChangeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bounceRuleChangeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BounceRuleChangeColumns = struct {
	ID           string
	Action       string
	BounceRuleID string
	ResponseCode string
	EnhancedCode string
	Regex        string
	Priority     string
	Description  string
	BounceAction string
	UpdatedAt    string
}{
	ID:           "id",
	Action:       "action",
	BounceRuleID: "bounce_rule_id",
	ResponseCode: "response_code",
	EnhancedCode: "enhanced_code",
	Regex:        "regex",
	Priority:     "priority",
	Description:  "description",
	BounceAction: "bounce_action",
	UpdatedAt:    "updated_at",
}

var BounceRuleChangeTableColumns = struct {
	ID           string
	Action       string
	BounceRuleID string
	ResponseCode string
	EnhancedCode string
	Regex        string
	Priority     string
	Description  string
	BounceAction string
	UpdatedAt    string
}{
	ID:           "bounce_rule_change.id",
	Action:       "bounce_rule_change.action",
	BounceRuleID: "bounce_rule_change.bounce_rule_id",
	ResponseCode: "bounce_rule_change.response_code",
	EnhancedCode: "bounce_rule_change.enhanced_code",
	Regex:        "bounce_rule_change.regex",
	Priority:     "bounce_rule_change.priority",
	Description:  "bounce_rule_change.description",
	BounceAction: "bounce_rule_change.bounce_action",
	UpdatedAt:    "bounce_rule_change.updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BounceRuleChangeWhere = struct {
	ID           whereHelperint16
	Action       whereHelperstring
	BounceRuleID whereHelperint16
	ResponseCode whereHelperint16
	EnhancedCode whereHelperstring
	Regex        whereHelperstring
	Priority     whereHelperint8
	Description  whereHelperstring
	BounceAction whereHelperstring
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint16{field: "`bounce_rule_change`.`id`"},
	Action:       whereHelperstring{field: "`bounce_rule_change`.`action`"},
	BounceRuleID: whereHelperint16{field: "`bounce_rule_change`.`bounce_rule_id`"},
	ResponseCode: whereHelperint16{field: "`bounce_rule_change`.`response_code`"},
	EnhancedCode: whereHelperstring{field: "`bounce_rule_change`.`enhanced_code`"},
	Regex:        whereHelperstring{field: "`bounce_rule_change`.`regex`"},
	Priority:     whereHelperint8{field: "`bounce_rule_change`.`priority`"},
	Description:  whereHelperstring{field: "`bounce_rule_change`.`description`"},
	BounceAction: whereHelperstring{field: "`bounce_rule_change`.`bounce_action`"},
	UpdatedAt:    whereHelpertime_Time{field: "`bounce_rule_change`.`updated_at`"},
}

// BounceRuleChangeRels is where relationship names are stored.
var BounceRuleChangeRels = struct {
}{}

// bounceRuleChangeR is where relationships are stored.
type bounceRuleChangeR struct {
}

// NewStruct creates a new relationship struct
func (*bounceRuleChangeR) NewStruct() *bounceRuleChangeR {
	return &bounceRuleChangeR{}
}

// bounceRuleChangeL is where Load methods for each relationship are stored.
type bounceRuleChangeL struct{}

var (
	bounceRuleChangeAllColumns            = []string{"id", "action", "bounce_rule_id", "response_code", "enhanced_code", "regex", "priority", "description", "bounce_action", "updated_at"}
	bounceRuleChangeColumnsWithoutDefault = []string{"action", "bounce_rule_id", "enhanced_code", "regex", "description", "bounce_action"}
	bounceRuleChangeColumnsWithDefault    = []string{"id", "response_code", "priority", "updated_at"}
	bounceRuleChangePrimaryKeyColumns     = []string{"id"}
)

type (
	// BounceRuleChangeSlice is an alias for a slice of pointers to BounceRuleChange.
	// This should almost always be used instead of []BounceRuleChange.
	BounceRuleChangeSlice []*BounceRuleChange
	// BounceRuleChangeHook is the signature for custom BounceRuleChange hook methods
	BounceRuleChangeHook func(context.Context, boil.ContextExecutor, *BounceRuleChange) error

	bounceRuleChangeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bounceRuleChangeType                 = reflect.TypeOf(&BounceRuleChange{})
	bounceRuleChangeMapping              = queries.MakeStructMapping(bounceRuleChangeType)
	bounceRuleChangePrimaryKeyMapping, _ = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, bounceRuleChangePrimaryKeyColumns)
	bounceRuleChangeInsertCacheMut       sync.RWMutex
	bounceRuleChangeInsertCache          = make(map[string]insertCache)
	bounceRuleChangeUpdateCacheMut       sync.RWMutex
	bounceRuleChangeUpdateCache          = make(map[string]updateCache)
	bounceRuleChangeUpsertCacheMut       sync.RWMutex
	bounceRuleChangeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bounceRuleChangeBeforeInsertHooks []BounceRuleChangeHook
var bounceRuleChangeBeforeUpdateHooks []BounceRuleChangeHook
var bounceRuleChangeBeforeDeleteHooks []BounceRuleChangeHook
var bounceRuleChangeBeforeUpsertHooks []BounceRuleChangeHook

var bounceRuleChangeAfterInsertHooks []BounceRuleChangeHook
var bounceRuleChangeAfterSelectHooks []BounceRuleChangeHook
var bounceRuleChangeAfterUpdateHooks []BounceRuleChangeHook
var bounceRuleChangeAfterDeleteHooks []BounceRuleChangeHook
var bounceRuleChangeAfterUpsertHooks []BounceRuleChangeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BounceRuleChange) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BounceRuleChange) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BounceRuleChange) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BounceRuleChange) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BounceRuleChange) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BounceRuleChange) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BounceRuleChange) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BounceRuleChange) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BounceRuleChange) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bounceRuleChangeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBounceRuleChangeHook registers your hook function for all future operations.
func AddBounceRuleChangeHook(hookPoint boil.HookPoint, bounceRuleChangeHook BounceRuleChangeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bounceRuleChangeBeforeInsertHooks = append(bounceRuleChangeBeforeInsertHooks, bounceRuleChangeHook)
	case boil.BeforeUpdateHook:
		bounceRuleChangeBeforeUpdateHooks = append(bounceRuleChangeBeforeUpdateHooks, bounceRuleChangeHook)
	case boil.BeforeDeleteHook:
		bounceRuleChangeBeforeDeleteHooks = append(bounceRuleChangeBeforeDeleteHooks, bounceRuleChangeHook)
	case boil.BeforeUpsertHook:
		bounceRuleChangeBeforeUpsertHooks = append(bounceRuleChangeBeforeUpsertHooks, bounceRuleChangeHook)
	case boil.AfterInsertHook:
		bounceRuleChangeAfterInsertHooks = append(bounceRuleChangeAfterInsertHooks, bounceRuleChangeHook)
	case boil.AfterSelectHook:
		bounceRuleChangeAfterSelectHooks = append(bounceRuleChangeAfterSelectHooks, bounceRuleChangeHook)
	case boil.AfterUpdateHook:
		bounceRuleChangeAfterUpdateHooks = append(bounceRuleChangeAfterUpdateHooks, bounceRuleChangeHook)
	case boil.AfterDeleteHook:
		bounceRuleChangeAfterDeleteHooks = append(bounceRuleChangeAfterDeleteHooks, bounceRuleChangeHook)
	case boil.AfterUpsertHook:
		bounceRuleChangeAfterUpsertHooks = append(bounceRuleChangeAfterUpsertHooks, bounceRuleChangeHook)
	}
}

// One returns a single bounceRuleChange record from the query.
func (q bounceRuleChangeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BounceRuleChange, error) {
	o := &BounceRuleChange{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bounce_rule_change")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BounceRuleChange records from the query.
func (q bounceRuleChangeQuery) All(ctx context.Context, exec boil.ContextExecutor) (BounceRuleChangeSlice, error) {
	var o []*BounceRuleChange

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BounceRuleChange slice")
	}

	if len(bounceRuleChangeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BounceRuleChange records in the query.
func (q bounceRuleChangeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bounce_rule_change rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bounceRuleChangeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bounce_rule_change exists")
	}

	return count > 0, nil
}

// BounceRuleChanges retrieves all the records using an executor.
func BounceRuleChanges(mods ...qm.QueryMod) bounceRuleChangeQuery {
	mods = append(mods, qm.From("`bounce_rule_change`"))
	return bounceRuleChangeQuery{NewQuery(mods...)}
}

// FindBounceRuleChange retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBounceRuleChange(ctx context.Context, exec boil.ContextExecutor, iD int16, selectCols ...string) (*BounceRuleChange, error) {
	bounceRuleChangeObj := &BounceRuleChange{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bounce_rule_change` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bounceRuleChangeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bounce_rule_change")
	}

	if err = bounceRuleChangeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bounceRuleChangeObj, err
	}

	return bounceRuleChangeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BounceRuleChange) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bounce_rule_change provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bounceRuleChangeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bounceRuleChangeInsertCacheMut.RLock()
	cache, cached := bounceRuleChangeInsertCache[key]
	bounceRuleChangeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bounceRuleChangeAllColumns,
			bounceRuleChangeColumnsWithDefault,
			bounceRuleChangeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bounce_rule_change` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bounce_rule_change` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bounce_rule_change` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bounceRuleChangePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bounce_rule_change")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bounceRuleChangeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bounce_rule_change")
	}

CacheNoHooks:
	if !cached {
		bounceRuleChangeInsertCacheMut.Lock()
		bounceRuleChangeInsertCache[key] = cache
		bounceRuleChangeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BounceRuleChange.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BounceRuleChange) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bounceRuleChangeUpdateCacheMut.RLock()
	cache, cached := bounceRuleChangeUpdateCache[key]
	bounceRuleChangeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bounceRuleChangeAllColumns,
			bounceRuleChangePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bounce_rule_change, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bounce_rule_change` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bounceRuleChangePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, append(wl, bounceRuleChangePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bounce_rule_change row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bounce_rule_change")
	}

	if !cached {
		bounceRuleChangeUpdateCacheMut.Lock()
		bounceRuleChangeUpdateCache[key] = cache
		bounceRuleChangeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bounceRuleChangeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bounce_rule_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bounce_rule_change")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BounceRuleChangeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bounceRuleChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bounce_rule_change` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bounceRuleChangePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bounceRuleChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bounceRuleChange")
	}
	return rowsAff, nil
}

var mySQLBounceRuleChangeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BounceRuleChange) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bounce_rule_change provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bounceRuleChangeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBounceRuleChangeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bounceRuleChangeUpsertCacheMut.RLock()
	cache, cached := bounceRuleChangeUpsertCache[key]
	bounceRuleChangeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bounceRuleChangeAllColumns,
			bounceRuleChangeColumnsWithDefault,
			bounceRuleChangeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bounceRuleChangeAllColumns,
			bounceRuleChangePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert bounce_rule_change, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bounce_rule_change`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bounce_rule_change` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bounce_rule_change")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bounceRuleChangeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bounceRuleChangeType, bounceRuleChangeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for bounce_rule_change")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bounce_rule_change")
	}

CacheNoHooks:
	if !cached {
		bounceRuleChangeUpsertCacheMut.Lock()
		bounceRuleChangeUpsertCache[key] = cache
		bounceRuleChangeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BounceRuleChange record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BounceRuleChange) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BounceRuleChange provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bounceRuleChangePrimaryKeyMapping)
	sql := "DELETE FROM `bounce_rule_change` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bounce_rule_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bounce_rule_change")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bounceRuleChangeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bounceRuleChangeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bounce_rule_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bounce_rule_change")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BounceRuleChangeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bounceRuleChangeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bounceRuleChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bounce_rule_change` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bounceRuleChangePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bounceRuleChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bounce_rule_change")
	}

	if len(bounceRuleChangeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BounceRuleChange) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBounceRuleChange(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BounceRuleChangeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BounceRuleChangeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bounceRuleChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bounce_rule_change`.* FROM `bounce_rule_change` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bounceRuleChangePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BounceRuleChangeSlice")
	}

	*o = slice

	return nil
}

// BounceRuleChangeExists checks if the BounceRuleChange row exists.
func BounceRuleChangeExists(ctx context.Context, exec boil.ContextExecutor, iD int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bounce_rule_change` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bounce_rule_change exists")
	}

	return exists, nil
}
