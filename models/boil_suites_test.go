// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("BounceRules", testBounceRules)
	t.Run("BounceRuleChanges", testBounceRuleChanges)
	t.Run("ThroughputRules", testThroughputRules)
	t.Run("ThroughputRuleChanges", testThroughputRuleChanges)
}

func TestDelete(t *testing.T) {
	t.Run("BounceRules", testBounceRulesDelete)
	t.Run("BounceRuleChanges", testBounceRuleChangesDelete)
	t.Run("ThroughputRules", testThroughputRulesDelete)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("BounceRules", testBounceRulesQueryDeleteAll)
	t.Run("BounceRuleChanges", testBounceRuleChangesQueryDeleteAll)
	t.Run("ThroughputRules", testThroughputRulesQueryDeleteAll)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("BounceRules", testBounceRulesSliceDeleteAll)
	t.Run("BounceRuleChanges", testBounceRuleChangesSliceDeleteAll)
	t.Run("ThroughputRules", testThroughputRulesSliceDeleteAll)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("BounceRules", testBounceRulesExists)
	t.Run("BounceRuleChanges", testBounceRuleChangesExists)
	t.Run("ThroughputRules", testThroughputRulesExists)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesExists)
}

func TestFind(t *testing.T) {
	t.Run("BounceRules", testBounceRulesFind)
	t.Run("BounceRuleChanges", testBounceRuleChangesFind)
	t.Run("ThroughputRules", testThroughputRulesFind)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesFind)
}

func TestBind(t *testing.T) {
	t.Run("BounceRules", testBounceRulesBind)
	t.Run("BounceRuleChanges", testBounceRuleChangesBind)
	t.Run("ThroughputRules", testThroughputRulesBind)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesBind)
}

func TestOne(t *testing.T) {
	t.Run("BounceRules", testBounceRulesOne)
	t.Run("BounceRuleChanges", testBounceRuleChangesOne)
	t.Run("ThroughputRules", testThroughputRulesOne)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesOne)
}

func TestAll(t *testing.T) {
	t.Run("BounceRules", testBounceRulesAll)
	t.Run("BounceRuleChanges", testBounceRuleChangesAll)
	t.Run("ThroughputRules", testThroughputRulesAll)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesAll)
}

func TestCount(t *testing.T) {
	t.Run("BounceRules", testBounceRulesCount)
	t.Run("BounceRuleChanges", testBounceRuleChangesCount)
	t.Run("ThroughputRules", testThroughputRulesCount)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesCount)
}

func TestHooks(t *testing.T) {
	t.Run("BounceRules", testBounceRulesHooks)
	t.Run("BounceRuleChanges", testBounceRuleChangesHooks)
	t.Run("ThroughputRules", testThroughputRulesHooks)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("BounceRules", testBounceRulesInsert)
	t.Run("BounceRules", testBounceRulesInsertWhitelist)
	t.Run("BounceRuleChanges", testBounceRuleChangesInsert)
	t.Run("BounceRuleChanges", testBounceRuleChangesInsertWhitelist)
	t.Run("ThroughputRules", testThroughputRulesInsert)
	t.Run("ThroughputRules", testThroughputRulesInsertWhitelist)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesInsert)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ThroughputRuleChangeToThroughputRuleUsingThroughputRule", testThroughputRuleChangeToOneThroughputRuleUsingThroughputRule)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ThroughputRuleToThroughputRuleChanges", testThroughputRuleToManyThroughputRuleChanges)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ThroughputRuleChangeToThroughputRuleUsingThroughputRuleChanges", testThroughputRuleChangeToOneSetOpThroughputRuleUsingThroughputRule)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ThroughputRuleToThroughputRuleChanges", testThroughputRuleToManyAddOpThroughputRuleChanges)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("BounceRules", testBounceRulesReload)
	t.Run("BounceRuleChanges", testBounceRuleChangesReload)
	t.Run("ThroughputRules", testThroughputRulesReload)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("BounceRules", testBounceRulesReloadAll)
	t.Run("BounceRuleChanges", testBounceRuleChangesReloadAll)
	t.Run("ThroughputRules", testThroughputRulesReloadAll)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("BounceRules", testBounceRulesSelect)
	t.Run("BounceRuleChanges", testBounceRuleChangesSelect)
	t.Run("ThroughputRules", testThroughputRulesSelect)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("BounceRules", testBounceRulesUpdate)
	t.Run("BounceRuleChanges", testBounceRuleChangesUpdate)
	t.Run("ThroughputRules", testThroughputRulesUpdate)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("BounceRules", testBounceRulesSliceUpdateAll)
	t.Run("BounceRuleChanges", testBounceRuleChangesSliceUpdateAll)
	t.Run("ThroughputRules", testThroughputRulesSliceUpdateAll)
	t.Run("ThroughputRuleChanges", testThroughputRuleChangesSliceUpdateAll)
}
