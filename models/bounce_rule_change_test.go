// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBounceRuleChanges(t *testing.T) {
	t.Parallel()

	query := BounceRuleChanges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBounceRuleChangesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBounceRuleChangesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BounceRuleChanges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBounceRuleChangesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BounceRuleChangeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBounceRuleChangesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BounceRuleChangeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BounceRuleChange exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BounceRuleChangeExists to return true, but got false.")
	}
}

func testBounceRuleChangesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bounceRuleChangeFound, err := FindBounceRuleChange(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bounceRuleChangeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBounceRuleChangesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BounceRuleChanges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBounceRuleChangesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BounceRuleChanges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBounceRuleChangesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bounceRuleChangeOne := &BounceRuleChange{}
	bounceRuleChangeTwo := &BounceRuleChange{}
	if err = randomize.Struct(seed, bounceRuleChangeOne, bounceRuleChangeDBTypes, false, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}
	if err = randomize.Struct(seed, bounceRuleChangeTwo, bounceRuleChangeDBTypes, false, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bounceRuleChangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bounceRuleChangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BounceRuleChanges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBounceRuleChangesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bounceRuleChangeOne := &BounceRuleChange{}
	bounceRuleChangeTwo := &BounceRuleChange{}
	if err = randomize.Struct(seed, bounceRuleChangeOne, bounceRuleChangeDBTypes, false, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}
	if err = randomize.Struct(seed, bounceRuleChangeTwo, bounceRuleChangeDBTypes, false, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bounceRuleChangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bounceRuleChangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bounceRuleChangeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func bounceRuleChangeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BounceRuleChange) error {
	*o = BounceRuleChange{}
	return nil
}

func testBounceRuleChangesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BounceRuleChange{}
	o := &BounceRuleChange{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange object: %s", err)
	}

	AddBounceRuleChangeHook(boil.BeforeInsertHook, bounceRuleChangeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeBeforeInsertHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.AfterInsertHook, bounceRuleChangeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeAfterInsertHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.AfterSelectHook, bounceRuleChangeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeAfterSelectHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.BeforeUpdateHook, bounceRuleChangeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeBeforeUpdateHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.AfterUpdateHook, bounceRuleChangeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeAfterUpdateHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.BeforeDeleteHook, bounceRuleChangeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeBeforeDeleteHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.AfterDeleteHook, bounceRuleChangeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeAfterDeleteHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.BeforeUpsertHook, bounceRuleChangeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeBeforeUpsertHooks = []BounceRuleChangeHook{}

	AddBounceRuleChangeHook(boil.AfterUpsertHook, bounceRuleChangeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bounceRuleChangeAfterUpsertHooks = []BounceRuleChangeHook{}
}

func testBounceRuleChangesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBounceRuleChangesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bounceRuleChangeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBounceRuleChangesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBounceRuleChangesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BounceRuleChangeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBounceRuleChangesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BounceRuleChanges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bounceRuleChangeDBTypes = map[string]string{`ID`: `smallint`, `Action`: `varchar`, `BounceRuleID`: `smallint`, `ResponseCode`: `smallint`, `EnhancedCode`: `varchar`, `Regex`: `varchar`, `Priority`: `tinyint`, `Description`: `varchar`, `BounceAction`: `varchar`, `UpdatedAt`: `datetime`}
	_                       = bytes.MinRead
)

func testBounceRuleChangesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bounceRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bounceRuleChangeAllColumns) == len(bounceRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBounceRuleChangesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bounceRuleChangeAllColumns) == len(bounceRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BounceRuleChange{}
	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bounceRuleChangeDBTypes, true, bounceRuleChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bounceRuleChangeAllColumns, bounceRuleChangePrimaryKeyColumns) {
		fields = bounceRuleChangeAllColumns
	} else {
		fields = strmangle.SetComplement(
			bounceRuleChangeAllColumns,
			bounceRuleChangePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BounceRuleChangeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBounceRuleChangesUpsert(t *testing.T) {
	t.Parallel()

	if len(bounceRuleChangeAllColumns) == len(bounceRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBounceRuleChangeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BounceRuleChange{}
	if err = randomize.Struct(seed, &o, bounceRuleChangeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BounceRuleChange: %s", err)
	}

	count, err := BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bounceRuleChangeDBTypes, false, bounceRuleChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BounceRuleChange struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BounceRuleChange: %s", err)
	}

	count, err = BounceRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
