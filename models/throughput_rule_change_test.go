// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testThroughputRuleChanges(t *testing.T) {
	t.Parallel()

	query := ThroughputRuleChanges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testThroughputRuleChangesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThroughputRuleChangesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ThroughputRuleChanges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThroughputRuleChangesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThroughputRuleChangeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThroughputRuleChangesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ThroughputRuleChangeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ThroughputRuleChange exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ThroughputRuleChangeExists to return true, but got false.")
	}
}

func testThroughputRuleChangesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	throughputRuleChangeFound, err := FindThroughputRuleChange(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if throughputRuleChangeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testThroughputRuleChangesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ThroughputRuleChanges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testThroughputRuleChangesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ThroughputRuleChanges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testThroughputRuleChangesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	throughputRuleChangeOne := &ThroughputRuleChange{}
	throughputRuleChangeTwo := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, throughputRuleChangeOne, throughputRuleChangeDBTypes, false, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}
	if err = randomize.Struct(seed, throughputRuleChangeTwo, throughputRuleChangeDBTypes, false, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = throughputRuleChangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = throughputRuleChangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ThroughputRuleChanges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testThroughputRuleChangesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	throughputRuleChangeOne := &ThroughputRuleChange{}
	throughputRuleChangeTwo := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, throughputRuleChangeOne, throughputRuleChangeDBTypes, false, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}
	if err = randomize.Struct(seed, throughputRuleChangeTwo, throughputRuleChangeDBTypes, false, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = throughputRuleChangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = throughputRuleChangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func throughputRuleChangeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func throughputRuleChangeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ThroughputRuleChange) error {
	*o = ThroughputRuleChange{}
	return nil
}

func testThroughputRuleChangesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ThroughputRuleChange{}
	o := &ThroughputRuleChange{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange object: %s", err)
	}

	AddThroughputRuleChangeHook(boil.BeforeInsertHook, throughputRuleChangeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeBeforeInsertHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.AfterInsertHook, throughputRuleChangeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeAfterInsertHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.AfterSelectHook, throughputRuleChangeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeAfterSelectHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.BeforeUpdateHook, throughputRuleChangeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeBeforeUpdateHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.AfterUpdateHook, throughputRuleChangeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeAfterUpdateHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.BeforeDeleteHook, throughputRuleChangeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeBeforeDeleteHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.AfterDeleteHook, throughputRuleChangeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeAfterDeleteHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.BeforeUpsertHook, throughputRuleChangeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeBeforeUpsertHooks = []ThroughputRuleChangeHook{}

	AddThroughputRuleChangeHook(boil.AfterUpsertHook, throughputRuleChangeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	throughputRuleChangeAfterUpsertHooks = []ThroughputRuleChangeHook{}
}

func testThroughputRuleChangesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThroughputRuleChangesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(throughputRuleChangeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThroughputRuleChangeToOneThroughputRuleUsingThroughputRule(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ThroughputRuleChange
	var foreign ThroughputRule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, throughputRuleChangeDBTypes, false, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, throughputRuleDBTypes, false, throughputRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRule struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ThroughputRuleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ThroughputRule().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ThroughputRuleChangeSlice{&local}
	if err = local.L.LoadThroughputRule(ctx, tx, false, (*[]*ThroughputRuleChange)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ThroughputRule == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ThroughputRule = nil
	if err = local.L.LoadThroughputRule(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ThroughputRule == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testThroughputRuleChangeToOneSetOpThroughputRuleUsingThroughputRule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ThroughputRuleChange
	var b, c ThroughputRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, throughputRuleChangeDBTypes, false, strmangle.SetComplement(throughputRuleChangePrimaryKeyColumns, throughputRuleChangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, throughputRuleDBTypes, false, strmangle.SetComplement(throughputRulePrimaryKeyColumns, throughputRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, throughputRuleDBTypes, false, strmangle.SetComplement(throughputRulePrimaryKeyColumns, throughputRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ThroughputRule{&b, &c} {
		err = a.SetThroughputRule(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ThroughputRule != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ThroughputRuleChanges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ThroughputRuleID != x.ID {
			t.Error("foreign key was wrong value", a.ThroughputRuleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ThroughputRuleID))
		reflect.Indirect(reflect.ValueOf(&a.ThroughputRuleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ThroughputRuleID != x.ID {
			t.Error("foreign key was wrong value", a.ThroughputRuleID, x.ID)
		}
	}
}

func testThroughputRuleChangesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThroughputRuleChangesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThroughputRuleChangeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThroughputRuleChangesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ThroughputRuleChanges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	throughputRuleChangeDBTypes = map[string]string{`ID`: `int`, `Action`: `varchar`, `ThroughputRuleID`: `int`, `MXDomain`: `varchar`, `MaxConnections`: `int`, `MessagesPerConnection`: `int`, `ConnectionTTLMillis`: `int`, `UpdatedAt`: `datetime`}
	_                           = bytes.MinRead
)

func testThroughputRuleChangesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(throughputRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(throughputRuleChangeAllColumns) == len(throughputRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testThroughputRuleChangesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(throughputRuleChangeAllColumns) == len(throughputRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ThroughputRuleChange{}
	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, throughputRuleChangeDBTypes, true, throughputRuleChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(throughputRuleChangeAllColumns, throughputRuleChangePrimaryKeyColumns) {
		fields = throughputRuleChangeAllColumns
	} else {
		fields = strmangle.SetComplement(
			throughputRuleChangeAllColumns,
			throughputRuleChangePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ThroughputRuleChangeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testThroughputRuleChangesUpsert(t *testing.T) {
	t.Parallel()

	if len(throughputRuleChangeAllColumns) == len(throughputRuleChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLThroughputRuleChangeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ThroughputRuleChange{}
	if err = randomize.Struct(seed, &o, throughputRuleChangeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ThroughputRuleChange: %s", err)
	}

	count, err := ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, throughputRuleChangeDBTypes, false, throughputRuleChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThroughputRuleChange struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ThroughputRuleChange: %s", err)
	}

	count, err = ThroughputRuleChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
