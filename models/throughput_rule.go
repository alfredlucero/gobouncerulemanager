// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ThroughputRule is an object representing the database table.
type ThroughputRule struct {
	ID                    int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	MXDomain              string `boil:"mx_domain" json:"mx_domain" toml:"mx_domain" yaml:"mx_domain"`
	MaxConnections        int    `boil:"max_connections" json:"max_connections" toml:"max_connections" yaml:"max_connections"`
	MessagesPerConnection int    `boil:"messages_per_connection" json:"messages_per_connection" toml:"messages_per_connection" yaml:"messages_per_connection"`
	ConnectionTTLMillis   int    `boil:"connection_ttl_millis" json:"connection_ttl_millis" toml:"connection_ttl_millis" yaml:"connection_ttl_millis"`

	R *throughputRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L throughputRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ThroughputRuleColumns = struct {
	ID                    string
	MXDomain              string
	MaxConnections        string
	MessagesPerConnection string
	ConnectionTTLMillis   string
}{
	ID:                    "id",
	MXDomain:              "mx_domain",
	MaxConnections:        "max_connections",
	MessagesPerConnection: "messages_per_connection",
	ConnectionTTLMillis:   "connection_ttl_millis",
}

var ThroughputRuleTableColumns = struct {
	ID                    string
	MXDomain              string
	MaxConnections        string
	MessagesPerConnection string
	ConnectionTTLMillis   string
}{
	ID:                    "throughput_rule.id",
	MXDomain:              "throughput_rule.mx_domain",
	MaxConnections:        "throughput_rule.max_connections",
	MessagesPerConnection: "throughput_rule.messages_per_connection",
	ConnectionTTLMillis:   "throughput_rule.connection_ttl_millis",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ThroughputRuleWhere = struct {
	ID                    whereHelperint
	MXDomain              whereHelperstring
	MaxConnections        whereHelperint
	MessagesPerConnection whereHelperint
	ConnectionTTLMillis   whereHelperint
}{
	ID:                    whereHelperint{field: "`throughput_rule`.`id`"},
	MXDomain:              whereHelperstring{field: "`throughput_rule`.`mx_domain`"},
	MaxConnections:        whereHelperint{field: "`throughput_rule`.`max_connections`"},
	MessagesPerConnection: whereHelperint{field: "`throughput_rule`.`messages_per_connection`"},
	ConnectionTTLMillis:   whereHelperint{field: "`throughput_rule`.`connection_ttl_millis`"},
}

// ThroughputRuleRels is where relationship names are stored.
var ThroughputRuleRels = struct {
	ThroughputRuleChanges string
}{
	ThroughputRuleChanges: "ThroughputRuleChanges",
}

// throughputRuleR is where relationships are stored.
type throughputRuleR struct {
	ThroughputRuleChanges ThroughputRuleChangeSlice `boil:"ThroughputRuleChanges" json:"ThroughputRuleChanges" toml:"ThroughputRuleChanges" yaml:"ThroughputRuleChanges"`
}

// NewStruct creates a new relationship struct
func (*throughputRuleR) NewStruct() *throughputRuleR {
	return &throughputRuleR{}
}

// throughputRuleL is where Load methods for each relationship are stored.
type throughputRuleL struct{}

var (
	throughputRuleAllColumns            = []string{"id", "mx_domain", "max_connections", "messages_per_connection", "connection_ttl_millis"}
	throughputRuleColumnsWithoutDefault = []string{"mx_domain", "max_connections", "messages_per_connection", "connection_ttl_millis"}
	throughputRuleColumnsWithDefault    = []string{"id"}
	throughputRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// ThroughputRuleSlice is an alias for a slice of pointers to ThroughputRule.
	// This should almost always be used instead of []ThroughputRule.
	ThroughputRuleSlice []*ThroughputRule
	// ThroughputRuleHook is the signature for custom ThroughputRule hook methods
	ThroughputRuleHook func(context.Context, boil.ContextExecutor, *ThroughputRule) error

	throughputRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	throughputRuleType                 = reflect.TypeOf(&ThroughputRule{})
	throughputRuleMapping              = queries.MakeStructMapping(throughputRuleType)
	throughputRulePrimaryKeyMapping, _ = queries.BindMapping(throughputRuleType, throughputRuleMapping, throughputRulePrimaryKeyColumns)
	throughputRuleInsertCacheMut       sync.RWMutex
	throughputRuleInsertCache          = make(map[string]insertCache)
	throughputRuleUpdateCacheMut       sync.RWMutex
	throughputRuleUpdateCache          = make(map[string]updateCache)
	throughputRuleUpsertCacheMut       sync.RWMutex
	throughputRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var throughputRuleBeforeInsertHooks []ThroughputRuleHook
var throughputRuleBeforeUpdateHooks []ThroughputRuleHook
var throughputRuleBeforeDeleteHooks []ThroughputRuleHook
var throughputRuleBeforeUpsertHooks []ThroughputRuleHook

var throughputRuleAfterInsertHooks []ThroughputRuleHook
var throughputRuleAfterSelectHooks []ThroughputRuleHook
var throughputRuleAfterUpdateHooks []ThroughputRuleHook
var throughputRuleAfterDeleteHooks []ThroughputRuleHook
var throughputRuleAfterUpsertHooks []ThroughputRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ThroughputRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ThroughputRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ThroughputRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ThroughputRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ThroughputRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ThroughputRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ThroughputRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ThroughputRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ThroughputRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range throughputRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddThroughputRuleHook registers your hook function for all future operations.
func AddThroughputRuleHook(hookPoint boil.HookPoint, throughputRuleHook ThroughputRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		throughputRuleBeforeInsertHooks = append(throughputRuleBeforeInsertHooks, throughputRuleHook)
	case boil.BeforeUpdateHook:
		throughputRuleBeforeUpdateHooks = append(throughputRuleBeforeUpdateHooks, throughputRuleHook)
	case boil.BeforeDeleteHook:
		throughputRuleBeforeDeleteHooks = append(throughputRuleBeforeDeleteHooks, throughputRuleHook)
	case boil.BeforeUpsertHook:
		throughputRuleBeforeUpsertHooks = append(throughputRuleBeforeUpsertHooks, throughputRuleHook)
	case boil.AfterInsertHook:
		throughputRuleAfterInsertHooks = append(throughputRuleAfterInsertHooks, throughputRuleHook)
	case boil.AfterSelectHook:
		throughputRuleAfterSelectHooks = append(throughputRuleAfterSelectHooks, throughputRuleHook)
	case boil.AfterUpdateHook:
		throughputRuleAfterUpdateHooks = append(throughputRuleAfterUpdateHooks, throughputRuleHook)
	case boil.AfterDeleteHook:
		throughputRuleAfterDeleteHooks = append(throughputRuleAfterDeleteHooks, throughputRuleHook)
	case boil.AfterUpsertHook:
		throughputRuleAfterUpsertHooks = append(throughputRuleAfterUpsertHooks, throughputRuleHook)
	}
}

// One returns a single throughputRule record from the query.
func (q throughputRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ThroughputRule, error) {
	o := &ThroughputRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for throughput_rule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ThroughputRule records from the query.
func (q throughputRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (ThroughputRuleSlice, error) {
	var o []*ThroughputRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ThroughputRule slice")
	}

	if len(throughputRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ThroughputRule records in the query.
func (q throughputRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count throughput_rule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q throughputRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if throughput_rule exists")
	}

	return count > 0, nil
}

// ThroughputRuleChanges retrieves all the throughput_rule_change's ThroughputRuleChanges with an executor.
func (o *ThroughputRule) ThroughputRuleChanges(mods ...qm.QueryMod) throughputRuleChangeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`throughput_rule_change`.`throughput_rule_id`=?", o.ID),
	)

	query := ThroughputRuleChanges(queryMods...)
	queries.SetFrom(query.Query, "`throughput_rule_change`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`throughput_rule_change`.*"})
	}

	return query
}

// LoadThroughputRuleChanges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (throughputRuleL) LoadThroughputRuleChanges(ctx context.Context, e boil.ContextExecutor, singular bool, maybeThroughputRule interface{}, mods queries.Applicator) error {
	var slice []*ThroughputRule
	var object *ThroughputRule

	if singular {
		object = maybeThroughputRule.(*ThroughputRule)
	} else {
		slice = *maybeThroughputRule.(*[]*ThroughputRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &throughputRuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &throughputRuleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`throughput_rule_change`),
		qm.WhereIn(`throughput_rule_change.throughput_rule_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load throughput_rule_change")
	}

	var resultSlice []*ThroughputRuleChange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice throughput_rule_change")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on throughput_rule_change")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for throughput_rule_change")
	}

	if len(throughputRuleChangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ThroughputRuleChanges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &throughputRuleChangeR{}
			}
			foreign.R.ThroughputRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ThroughputRuleID {
				local.R.ThroughputRuleChanges = append(local.R.ThroughputRuleChanges, foreign)
				if foreign.R == nil {
					foreign.R = &throughputRuleChangeR{}
				}
				foreign.R.ThroughputRule = local
				break
			}
		}
	}

	return nil
}

// AddThroughputRuleChanges adds the given related objects to the existing relationships
// of the throughput_rule, optionally inserting them as new records.
// Appends related to o.R.ThroughputRuleChanges.
// Sets related.R.ThroughputRule appropriately.
func (o *ThroughputRule) AddThroughputRuleChanges(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ThroughputRuleChange) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ThroughputRuleID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `throughput_rule_change` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"throughput_rule_id"}),
				strmangle.WhereClause("`", "`", 0, throughputRuleChangePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ThroughputRuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &throughputRuleR{
			ThroughputRuleChanges: related,
		}
	} else {
		o.R.ThroughputRuleChanges = append(o.R.ThroughputRuleChanges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &throughputRuleChangeR{
				ThroughputRule: o,
			}
		} else {
			rel.R.ThroughputRule = o
		}
	}
	return nil
}

// ThroughputRules retrieves all the records using an executor.
func ThroughputRules(mods ...qm.QueryMod) throughputRuleQuery {
	mods = append(mods, qm.From("`throughput_rule`"))
	return throughputRuleQuery{NewQuery(mods...)}
}

// FindThroughputRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindThroughputRule(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ThroughputRule, error) {
	throughputRuleObj := &ThroughputRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `throughput_rule` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, throughputRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from throughput_rule")
	}

	if err = throughputRuleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return throughputRuleObj, err
	}

	return throughputRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ThroughputRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no throughput_rule provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(throughputRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	throughputRuleInsertCacheMut.RLock()
	cache, cached := throughputRuleInsertCache[key]
	throughputRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			throughputRuleAllColumns,
			throughputRuleColumnsWithDefault,
			throughputRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(throughputRuleType, throughputRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(throughputRuleType, throughputRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `throughput_rule` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `throughput_rule` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `throughput_rule` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, throughputRulePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into throughput_rule")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == throughputRuleMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for throughput_rule")
	}

CacheNoHooks:
	if !cached {
		throughputRuleInsertCacheMut.Lock()
		throughputRuleInsertCache[key] = cache
		throughputRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ThroughputRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ThroughputRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	throughputRuleUpdateCacheMut.RLock()
	cache, cached := throughputRuleUpdateCache[key]
	throughputRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			throughputRuleAllColumns,
			throughputRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update throughput_rule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `throughput_rule` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, throughputRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(throughputRuleType, throughputRuleMapping, append(wl, throughputRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update throughput_rule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for throughput_rule")
	}

	if !cached {
		throughputRuleUpdateCacheMut.Lock()
		throughputRuleUpdateCache[key] = cache
		throughputRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q throughputRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for throughput_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for throughput_rule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ThroughputRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), throughputRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `throughput_rule` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, throughputRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in throughputRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all throughputRule")
	}
	return rowsAff, nil
}

var mySQLThroughputRuleUniqueColumns = []string{
	"id",
	"mx_domain",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ThroughputRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no throughput_rule provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(throughputRuleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLThroughputRuleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	throughputRuleUpsertCacheMut.RLock()
	cache, cached := throughputRuleUpsertCache[key]
	throughputRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			throughputRuleAllColumns,
			throughputRuleColumnsWithDefault,
			throughputRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			throughputRuleAllColumns,
			throughputRulePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert throughput_rule, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`throughput_rule`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `throughput_rule` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(throughputRuleType, throughputRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(throughputRuleType, throughputRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for throughput_rule")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == throughputRuleMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(throughputRuleType, throughputRuleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for throughput_rule")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for throughput_rule")
	}

CacheNoHooks:
	if !cached {
		throughputRuleUpsertCacheMut.Lock()
		throughputRuleUpsertCache[key] = cache
		throughputRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ThroughputRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ThroughputRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ThroughputRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), throughputRulePrimaryKeyMapping)
	sql := "DELETE FROM `throughput_rule` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from throughput_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for throughput_rule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q throughputRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no throughputRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from throughput_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for throughput_rule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ThroughputRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(throughputRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), throughputRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `throughput_rule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, throughputRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from throughputRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for throughput_rule")
	}

	if len(throughputRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ThroughputRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindThroughputRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThroughputRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ThroughputRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), throughputRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `throughput_rule`.* FROM `throughput_rule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, throughputRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ThroughputRuleSlice")
	}

	*o = slice

	return nil
}

// ThroughputRuleExists checks if the ThroughputRule row exists.
func ThroughputRuleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `throughput_rule` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if throughput_rule exists")
	}

	return exists, nil
}
